% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distance-depth.R
\name{depth_curves_to_points}
\alias{depth_curves_to_points}
\alias{depth_curves_to_points.list}
\alias{depth_curves_to_points.grouped_df}
\title{Global Distance Depth
pulling out data points from curves that are the most deep}
\usage{
depth_curves_to_points(x, alpha, dist_mat, dist_func = distance_depth_function)

\method{depth_curves_to_points}{list}(x, alpha, dist_mat, dist_func = distance_depth_function)

\method{depth_curves_to_points}{grouped_df}(x, alpha, dist_mat, dist_func = distance_depth_function)
}
\arguments{
\item{x}{list or grouped_df containing curves, with index ordering associated
with the dist_mat's row/column ordering}

\item{alpha}{the proportion of curves to be removed before presenting all the
points together. Takes value in (0, 1.0)}

\item{dist_mat}{distance matrix}

\item{dist_func}{function to calculate depth via the distance_matrix}
}
\value{
data frame from curves of correct depth.
}
\description{
Global Distance Depth
pulling out data points from curves that are the most deep
}
\details{
This function for lists (renamed as \code{depth_curves_to_points})
is shared with \pkg{TCpredictionbands} on github:
\href{https://github.com/Mr8ND/TC-prediction-bands/tree/master/TCpredictionbands}{TCpredictionbands}.
}
\examples{
library(dplyr)
set.seed(1)
random_data_list <- lapply(1:5, function(x){data.frame(matrix(rnorm(10),
                                                              ncol = 2))})

dist_mat <- dist_matrix_innersq_direction(random_data_list,
                                position = 1:2,
                                verbose = FALSE)

combined_points_list <- depth_curves_to_points(random_data_list,
                                               alpha = .2,
                                               dist_mat)

random_data_grouped <- random_data_list \%>\%
  do.call(rbind, .) \%>\%
  mutate(id = rep(1:5, each = 5)) \%>\%
  group_by(id)

combined_points_grouped <- depth_curves_to_points(random_data_grouped,
                                                  alpha = .2,
                                                  dist_mat)
}
