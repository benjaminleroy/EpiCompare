% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat.R
\name{stat_sir}
\alias{stat_sir}
\alias{geom_sir}
\title{SIR path visuals}
\usage{
stat_sir(mapping = NULL, data = NULL, geom = "path",
  position = "identity", na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, data_type = c("raw", "fortified"), ...)

geom_sir(mapping = NULL, data = NULL, stat = c("SirRaw",
  "SirFortified")[which(c("raw", "fortified") \%in\% data_type)][1],
  position = "identity", ..., na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, data_type = c("raw", "fortified"))
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by
\code{\link[ggplot2:aes]{aes()}} or \code{\link[ggplot2:aes_]{aes_()}}.
If specified and \code{inherit.aes = TRUE} (the default), it is combined with
the default mapping at the top level of the plot. You must supply mapping if
there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three options:

If \code{NULL}, the default, the data is inherited from the plot data as
specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, will override the plot data.

A function will be called with a single argument, the plot data. The return
value must be a data.frame, and will be used as the layer data. A function
can be created from a formula (e.g. ~ head(.x, 10)).}

\item{geom}{Override the default connection between \code{stat_sir()} and
\code{\link[ggplot2:geom_path]{geom_path()}}.}

\item{position}{Position adjustment, either as a string, or the result of a
call to a position adjustment function}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with a
warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped. \code{FALSE}
 never includes, and \code{TRUE} always includes. It can also be a named
 logical vector to finely select the aesthetics to display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics, rather
than combining with them. This is most useful for helper functions that
define both data and aesthetics and shouldn't inherit behaviour from the}

\item{data_type}{string. Currently can tell the stat to process the data like
"raw" individual data (formated like \code{\link{hagelloch_raw}}) or
"fortified" individual data (formated like \code{\link{hagelloch_agents}}
or the output of \code{\link{fortify.individuals_df}}).}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}.
These are often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters to the
paired geom/stat.}

\item{stat}{Overrides state that is defined relative to \code{data_type}}
}
\description{
SIR path visuals
}
\section{Aesthetics}{


The required aesthetics for \code{stat_sir} depend on the \code{data_type}
parameter.

If \code{data_type = "raw"} then \code{stat_sir} uses \code{stat_SirRaw()}
as the underlying stat and understands the following aesthetics (required
aesthetics are in bold):
\itemize{
 \item \strong{\code{y}} raw time when initially infected
 \item \strong{\code{z}} raw time when started recovery
 \item \code{group}
 }

If \code{data_type = "fortified"} then \code{stat_sir} uses
\code{stat_SirFortified()} as the underlying stat and understands the
following aesthetics (required aesthetics are in bold):
\itemize{
 \item \strong{\code{init_state}} initial state of agent (0/1/2 for
 suspectable/infected/recovered)
 \item \strong{\code{x}} integer with maximum time suspectable for each agent
 \item \strong{\code{y}} integer with maximum time infected for each agent
 \item \code{group}
 }

Learn more about setting these aesthetics in \code{vignette("ggplot2-specs")}.
}

\examples{
library(ggplot2)
library(dplyr)
library(ggtern)


# geom_sir
timeternR::hagelloch_raw \%>\% filter(SEX \%in\% c("male", "female")) \%>\%
  ggplot(., aes(y = tI, z = tR, color = SEX)) +
  geom_sir(data_type = "raw") + coord_tern() +
  labs(x = "S", y = "I", z = "R",
       color = "Gender")

timeternR::U_sims_tidy \%>\%
  ggplot() +
  geom_sir(aes(x = SMax, y = IMax, init_state = init_state,
                group = sim), alpha = .1,
            data_type = "fortified") +
  coord_tern() +
  labs(x = "S", y = "I", z = "R")

# stat_sir
timeternR::hagelloch_raw \%>\% filter(SEX \%in\% c("male", "female")) \%>\%
  ggplot(., aes(y = tI, z = tR, color = SEX)) +
  geom_path(stat = StatSirRaw) + coord_tern() +
  labs(x = "S", y = "I", z = "R",
       color = "Gender")

timeternR::hagelloch_raw \%>\% dplyr::filter(SEX \%in\% c("male", "female")) \%>\%
  ggplot(., aes(y = tI, z = tR, color = SEX)) +
  stat_sir(geom = "path") +
  # note geom = "path" is the default (as is data_type = "raw")
  coord_tern() +
  labs(x = "S", y = "I", z = "R",
       color = "Gender")

timeternR::U_sims_tidy \%>\%
  ggplot() +
  geom_path(aes(x = SMax, y = IMax, init_state = init_state, group = sim),
            alpha = .1, stat = timeternR::StatSirFortified) +
  coord_tern() +
  labs(x = "S", y = "I", z = "R")

timeternR::U_sims_tidy \%>\%
  ggplot() +
  stat_sir(aes(x = SMax, y = IMax, init_state = init_state,
                group = sim), alpha = .1,
            data_type = "fortified") +
  coord_tern() +
  labs(x = "S", y = "I", z = "R")

}
