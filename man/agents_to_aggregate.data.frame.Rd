% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/agent-to-aggregate.R
\name{agents_to_aggregate.data.frame}
\alias{agents_to_aggregate.data.frame}
\title{generalized function to convert raw agent based data to aggregate data}
\usage{
\method{agents_to_aggregate}{data.frame}(
  agents,
  states,
  death = NULL,
  birth = NULL,
  min_max_time = c(0, NA)
)
}
\arguments{
\item{agents}{data frame with individual agent information}

\item{states}{Name-variable pairs of the form \code{states = c(col1, col2)},
that describe which columns contain the time one entered the state. Do not
include column for original state. These need to be ordered, for example:
for an SIR model, with columns "\code{tI}" and "\code{tR}" expressing the
time the individual became infected and recovered (respectively), we want
"\code{states = c(tI, tR)}".}

\item{death}{string for column with death time information (default
\code{NULL})}

\item{birth}{string for column with birth time information (default
\code{NULL})}

\item{min_max_time}{vector (length 2) of minimum and maximum integer time,
the second value can be \code{NA} - and if so, we estimate maximum time
from the data.}
}
\value{
dataset with aggregated information, We label classes "\code{X\{i\}}"
  for i in \code{0:(length(states))}.
}
\description{
generalized function to convert raw agent based data to aggregate data
}
\details{
note that all parameters related to name columns can also be in a
  string format.
}
\examples{
agents <- timeternR::hagelloch_raw
states <- c("tI", "tR")
death <- "tDEAD"
birth <- NULL
min_max_time <- c(0, NA)

b <- agents_to_aggregate(agents, states, death, birth = birth)
a <- timeternR::hagelloch_raw \%>\%
timeternR::fortify_agents() \%>\%
timeternR::agents_to_aggregate_SIR() \%>\%
as.matrix

#look at:
b[1:(nrow(b)-2),] - a[2:nrow(a),]

# keeping in mind:
timeternR::hagelloch_raw \%>\% dplyr::filter(!is.na(.data$tDEAD)) \%>\%
dplyr::pull(.data$tDEAD) \%>\% ceiling() \%>\% sort

### example 2 of code:
agents <- timeternR::hagelloch_raw
# making babies
set.seed(5)
babies <- sample(nrow(agents),size = 5)
agents$tBIRTH <- NA
agents$tBIRTH[babies] <- agents$tI[babies] - 5
death <- NULL
birth <- "tBIRTH"
min_max_time <- c(0, NA)

b <- agents_to_aggregate(agents, states = c(tI, tR), death, birth = birth)
a <- timeternR::hagelloch_raw \%>\%
timeternR::fortify_agents() \%>\%
timeternR::agents_to_aggregate_SIR() \%>\%
as.matrix

b[1:(nrow(b)-2),] - a[2:nrow(a),]

agents \%>\% dplyr::filter(!is.na(.data$tBIRTH)) \%>\%
dplyr::pull(.data$tBIRTH) \%>\% ceiling() \%>\% sort

b2 <- agents_to_aggregate(agents, states = c("tI", "tR"), death,
                          birth = birth) # not that you may also use strings
assertthat::are_equal(b, b2)
}
